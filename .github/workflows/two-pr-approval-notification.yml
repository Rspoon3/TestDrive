name: PR Approval Slack Notification

on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [synchronize]  # Trigger on any push to a PR

env:
  REQUIRED_APPROVALS: 2  # Set the required number of approvals
  GITHUB_TO_SLACK_MAP: '{"Rspoon3": "U04APJ20ZFY"}'  # Map as a JSON string

jobs:
  notify-on-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Check for approvals with debug logs and pending reviewer handling
        id: approval_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string  # Ensure output is in string format
          retries: 3  # Retry the action 3 times if it fails
          retry-exempt-status-codes: 400,401,403  # Do not retry if these status codes are encountered
          script: |
            // Parse GitHub to Slack mapping from the environment variable
            const githubToSlackMap = JSON.parse(process.env.GITHUB_TO_SLACK_MAP);

            // Get PR creator's GitHub username
            const prCreator = context.payload.pull_request.user.login;

            // Get corresponding Slack ID
            const slackUser = githubToSlackMap[prCreator] || null;

            if (!slackUser) {
              console.log(`No Slack mapping found for GitHub user: ${prCreator}`);
              return { approvals: 0 };
            }

            // Filter approvals from the latest review map
            const approvalsTest = 2;

            // Log the number of current approvals
            console.log(`Number of current approvals: ${approvals.length}`);

            // Return both approvals and slackUser
            return { approvals: approvalsTest, slackUser };

      - name: Exit if approval count is not met
        uses: actions/github-script@v7
        with:
          script: |
            const approvals = parseInt(`${{ steps.approval_check.outputs.approvals }}`);
            const required = parseInt(`${{ env.REQUIRED_APPROVALS }}`);

            console.log(`Debugging 1: steps.approval_check.outputs.approvals: ${steps.approval_check.outputs.approvals}`);
            console.log(`Debugging 2: steps.approval_check.outputs.approvals: ${approvals}`);
            console.log(`Debugging 3: env.REQUIRED_APPROVALS: ${required}`);
          
            if (approvals !== required) {
              console.log("Approval count not met, stopping action.");
              process.exit(1);  // Exit if approvals do not match required
            } else {
              console.log("Approval count met.");
            }